/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { registerRoute } from 'workbox-routing';
import { CacheFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { googleFontsCache, imageCache } from 'workbox-recipes';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// precacheAndRoute(self.__WB_MANIFEST); 
const ignored = self.__WB_MANIFEST;

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
// const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');

// registerRoute(
//     // Return false to exempt requests from being fulfilled by index.html.
//     ({ request, url }) => {
//         // If this isn't a navigation, skip.
//         if (request.mode !== 'navigate') {
//             return false;
//         } // If this is a URL that starts with /_, skip.

//         if (url.pathname.startsWith('/_')) {
//             return false;
//         } // If this looks like a URL for a resource, because it contains // a file extension, skip.

//         if (url.pathname.match(fileExtensionRegexp)) {
//             return false;
//         } // Return true to signal that we want to use the handler.

//         return true;
//     },
//     createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
// );

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
// registerRoute(
//     // Add in any other file extensions or routing criteria as needed.
//     ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
//     new StaleWhileRevalidate({
//         cacheName: 'images',
//         plugins: [
//             // Ensure that once this runtime cache reaches a maximum size the
//             // least-recently used images are removed.
//             new ExpirationPlugin({ maxEntries: 50 }),
//         ],
//     })
// );

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({ type: 'SKIP_WAITING' })
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Custom

const clients = self.clients;

// Push

self.addEventListener('push', function (event) {
    const data = event.data.json();

    // model
    // {
    //     version: 'reminder',
    //     app: 'task',
    //     url: config.value.app.main,

    //     object: {
    //         id: item.task._id,
    //         name: item.task.name,
    //     }
    // }

    let name = 'Notification onesy';

    const object = data.object || {};

    if (data.version === 'reminder') {
        if (data.app === 'task') name = `${object.name ? `${object.name} ` : ''}${object.name ? 'task' : 'Task'} reminder`;
    }

    const options = {
        body: 'Your reminder for the task',
        data
    };

    event.waitUntil(self.registration.showNotification(name, options));
});

self.addEventListener('notificationclick', (event) => {
    const notification = event.notification;

    notification.close();

    const data = notification.data;

    if (!data) return;

    const object = data.object;

    let url = `${data.url}`;

    if (data.app === 'task') url += `/tasks/all/${object?.id}`;

    // If window with the same url is open, focus it
    // otherwise open it in the new window tab
    event.waitUntil(
        clients
            .matchAll({
                type: 'window',
            })
            .then((clientList) => {
                for (const client of clientList) {
                    if (client.url === url && 'focus' in client) return client.focus();
                }

                if (clients.openWindow) return clients.openWindow(url);
            })
    );
});

// Cache

const maxAgeSeconds = 12 * 30 * 24 * 60 * 60;

const maxEntries = 1e4;

const videoCache = () => {
    registerRoute(
        ({ request }) => request.destination === 'video',
        new CacheFirst({
            cacheName: 'videos',
            plugins: [
                new CacheableResponsePlugin({
                    statuses: [0, 200],
                }),
                new ExpirationPlugin({
                    maxEntries,
                    maxAgeSeconds
                })
            ]
        })
    );
};

// Recipes

// HTML
// network first
// pageCache({
//     plugins: [
//         new CacheableResponsePlugin({
//             statuses: [0, 200]
//         })
//     ]
// });

// CSS, javascript, web worker requests
// stale while revalidate
// staticResourceCache({
//     plugins: [
//         new CacheableResponsePlugin({
//             statuses: [0, 200]
//         })
//     ]
// });

// images
// cache first
imageCache({
    maxAgeSeconds,
    maxEntries
});

// videos
// cache first
videoCache();

// Google fonts
// stale while revalidate
googleFontsCache();

